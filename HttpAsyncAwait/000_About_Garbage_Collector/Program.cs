using System.Runtime.InteropServices;

namespace _000_About_Garbage_Collector
{
    /*
            Сборщик мусора в .Net - это механизм CRL, который отвечает за автоматическое освобождение 
            памяти от неиспользуемых более объектов.

            CLR - это виртуальная машина =>
                          а это - интерпретатор компилирующего типа =>
                                               дискретный функциональный преобразователь, который преобразовывает байт коды в машинные коды с учетом вызова API функций операционной системы(в нашем случае - Windows).
            В нашем же случае - CRL - это ещё + набор специальных механизмов, которые помогают правильно выполнять програмный код:
            - Механизмы оптимизации програмного кода
            - Механизм строящигся объектов. Этот механизм контролирует построение и удаление объектов.
            ТАК ВОТ, этот механизм контроля использования памяти, использования програмных объектов, которые строятся на динамической области памяти - КУЧЕ, называется сборщиком мусора.

            Есть неуправяемая куча OS Windows. Механизм, который ответственный за нее называется планировщиком кучи. 
            Когда мы пишем программы на C++, то объекты, которые мы создаем создаются на науправляемой куче OS Windows.
            Но объекты нужно ещё удалять, тем самыс освобождая место для новых объектов. И когда мы пишем на С++ нужно САМОМУ УДАЛЯТЬ ненужные объекты из кучи.

            С приходом .NET пришло несколько парадигм - одна из них - парадигма автоматического управления памятью(сборки и удаления нескпользуемых объектов). 
            Програмисты, которые пишут под .NET сами не удаляют объекты. Их удаляет Сборщик Мусора.

            .NET`ные объекты размещаются НЕ на неуправляемой куче OS Windows, а НА управлямой куче .NET. Сборщику мусора выдается 
            место под "свою" управляемую кучу, где он сам контролирует объекты(ОН ВЕДЕТ УЧЕТ всех объектов).
            Для КАЖДОГО .NET`ного приложения(процесса) - СОЗДАЕТСЯ СВОЯ КУЧА.

            Если ЗАБЫВАТЬ УДАЛЯТЬ неиспользуемые объекты - будут создаваться "УТЕЧКИ ПАМЯТИ" - Memory Leak.
            Благодарю сборщику мусора - эффект "УТЕЧКИ ПАМЯТИ" практически отсутствует в .NET`ных приложениях.

            ------------------------------------------------------------------------------------------------------------------------------------------

            ДЕСТРУКТОР
            Метод System.Object.Finalize() будет вызван сборщиком мусора непосредственно перед уничтожением объекта,
            его НЕВОЗМОЖНО вызвать САМОСТОЯТЕЛЬНО. Только сборщик мусора(GC) может вызвать деструктор.

            !!!!ВАЖНО. Деструктор - метод, который вызывается НЕ ДЛЯ УБИЙСТВА ОБЪЕКТА, а для ВЫПОЛНЕНИЯ ПОСЛЕДНЕГО ЖЕЛАНИЯ ОБЪЕКТА.
            Например при создании объекта открылось соединения с БД и при удалении объекта нужно закрыть соединения к базе данных, чтобы другие процессы могли к ней доступиться.
            */
    class SomeType
    {
        //Это метод Finalize (Деструктор)
        //!!!!ВАЖНО!!! Любой деструктор при компиляции преобразуется в метод Finalize()
        ~SomeType()
        {
            //Здесь помещается код метода Finalize
        }
    }
    class Program
    {
        static void Main(string[] args)
        {

        }
    }
}
