using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _001_Anonymous
{
    //var была разработана для работы с анонимными типами. Анонимные типы нужны для того, чтобы использовать их в языке LINQ(в операции ПРОЕКЦИИ)

    //Анонимные типы предлагают удобный способ инкапсулирования набора в один объект.
    //без необходимости предварительного явного определения типа.
    //Имя типа создается компилятором и недоступно на уровне исходного кода.
    //Анонимные типы являются ССЫЛОЧНЫМИ типами, которые происходит непосредственно от класса object!
    //Компилятор присваивает им имена, несмотря на то, что эти имена недоступны для приложения.

    //Обычно анонимные типы используются в предложении select выражения запроса 
    //для возврата поднабора свойств из каждого объекта в исходной последовательности.
    //Анонимные типы являются типами class, прямыми производными от типа object, и не могут быть приведены ни к какому иному типу, кроме object.
    //Так как методы Equals и GetHashCode в анонимных типах определяются с точки зрения методов свойств Equals и GetHashCode,
    //!!!!!два ЭКЗЕМПЛЯРА одного и того же анонимного типа РАВНЫ, только если РАВНЫ их СВОЙСТВА.

    //class MyClass //при использовании анонимных типов создается класс(невидимо для нас) со свойствами только для ЧТЕНИЯ
    //(в примере ниже свойства имеют set, но на самом деле при использовании анонимных типов в классе генерятся свойства только для чтения)!
    //{
    //    public string Name { get; set; }
    //    public int Age { get; set;}
    //}
    class Program
    {
        static void Main(string[] args)
        {
            //var instance = new MyClass { Name = "Alex", Age = 27 };
            //На 28 строке мы создаем неявнотипизированную локальную переменную с именем instance и присвиваем ей ссылку
            //на экземпляр анонимного типа, которому в блоке инициализатора свойствам присваиваем значения.
            var instance = new { Name = "Alex", Age = 27 };
            //instance.Name = "XXX"; //Свойство только для чтения (со значком Anonymous)
            Console.WriteLine($"Name = {instance.Name}, Age = {instance.Age}"); //`a - anonymous

            Type type = instance.GetType();
            Console.WriteLine(type); //Выведет <>f_AnonymousType0'2[System.String, System.Int32] 
            //System.String - Name = "Alex", System.Int32 - Age = 27

            //Delay
            Console.ReadKey();
        }
    }
}
