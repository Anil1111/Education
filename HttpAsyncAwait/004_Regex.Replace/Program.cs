using System;
using System.Text.RegularExpressions;

namespace _004_Regex.Replace
{
    /*
     ВАЖНО!!!
     //ВНУТРИ ШАБЛОННЫЕ ПЕРЕМЕННЫЕ
     Метод Regex.Replace заменяет в первом параметре-строке (myString) подстроку соответствующую шаблону (String) во втором параметре,
     на подстроку-вставку в третьем параметре (TEST); - результат myTest

     Шаблонные переменны - объявляются  и используются в текущем шаблоне таким образом:
     (?<someVar>\d+) - обявление переменной someVar с типом \d+
     ${someVar} - использование шаблонных переменных в новом шаблоне.
     Пример: Regex.Replace(@"test123firststr456secondstr",                            наша строка
                           @"test(?<first>\d+)firststr(?<second>\d+)secondstr",       выдираем значение в переменные в соответствии с шаблону на этой строке
                           @"test${second}firststr${first}secondstr")                 то, что хотим вернуть, подставив значения переменных соответствии с шаблону на этой строке

        Этот пример вернёт строку test456firststr123secondstr, он изменит шаблон так, что подстрока 123 поменяется местами с 456

        В этом же примере ипользуется новая конструкция {1,2} и подобные,
        она определяет кол-во повторов нужного нам элемента(например \S, \d etc). Формат: {min,max}.
        Пример: \d{2,4} - числа длиной от двух до четырех символов (12, 123, 1234) , а 12345 - уже не подходит
     */
    class Program
    {
        static void Main(string[] args)
        {
            //как только поставил кавычки в 3м параметре метода Regex.Replace, то все подсверилось
            //Замена подстроки соответствующей шаблону - пробелом.
            Console.WriteLine(Regex.Replace("test123aaa4x5x6bbb789ccc",    //Исходная строка
                                             @"\d+",                       //Шаблон, чтобы определять какие элементы мы будем менять
                                             " "));                        //То на что мы будем менять каждый из элементов, подходящий по шаблону

            //Подумай в чем разница между этим и предидущим(там элемент это может быть более чем один чимловой символ и они заменяться одним пробелом, а тут когда \d - каждый числовой символ замениться одним пробелом)
            Console.WriteLine(Regex.Replace("test123aaa4x5x6bbb789ccc",    //Исходная строка
                                             @"\d",                       //Шаблон, чтобы определять какие элементы мы будем менять
                                             " "));                        //То на что мы будем менять каждый из элементов, подходящий по шаблону

            // Когда мы используем переменные, то в третьем параметре метода Regex.Replace указываем ту строку, которую мы хотим получить в конце.
            Console.WriteLine(Regex.Replace("02/05/1982",                                            //Исходная строка - 5 февраля
                                            @"(?<месяц>\d{1,2})/(?<день>\d{1,2})/(?<год>\d{2,4})",   //Шаблон
                                            "${день}-${месяц}-${год}"));                             //Новый формат

            Console.WriteLine(Regex.Replace(@"test123firststr456secondstr",                          //Исходная строка
                                            @"test(?<var1>\d+)firststr(?<var2>\d+)secondstr",         //Шаблон - вытягиваем из нашей строки значени с помощью шаблона и запихиваем их в переменные
                                            @"test${var2}firststr${var1}secondstr"));                //Формируем строку, которую хотим вывести, используя переменные

            Console.WriteLine(Regex.Replace("5 is less than 10",                                     //Исходная строка
                                            @"\d+",                                                   //Шаблон, по которому определяем элементы, к которым будет применяться функция
                                            match => (int.Parse(match.Value) + 1).ToString()));      //Функция изменений совпадений. Заменяем элементы на возвращаемое значение функции
            //Delay
            Console.ReadKey();
        }
    }
}
