using System;
// Аттрибуты. (Аспектно-Ориентированно Программирование)
// Атрибуты МОГУТ ИСПОЛЬЗОВАТЬСЯ перед объявлениями типов,
// членов класса, членов интерфейса и перечислений.

// Виды аттрибутов: ПРЕДОПРЕДЕЛЕННЫЕ и ПОЛЬОВАТЕЛЬСКИЕ.
// ПРЕДОПРЕДЕЛЕННЫЕ - уже написанные програмистами Microsoft и идут в поставка FCL(Framework Class Library) , ПОЛЬОВАТЕЛЬСКИЕ те, которые мы создали сами.
// [ ...... ] - секция аттрибута
// Объявление атрибута состоит из Имена атрибута и набора Параметров.
// Для атрибутов определят два типа параметров - ПОЗИЦИОННЫЕ И ИМЕНОВАННЫЕ.
// ИМЕНОВАННЫЕ параметры сегда располагаются после ПОЗИЦИОННЫХ

namespace _001_Attributes.Attributes
{
    // Для создания атрибута необходимо создать класс производный от класса : System.Attribute
    // Атрибут - [AttributeUsage] - задает свойства поьзовательских атрибутов.
    // ПОЗИЦИОННЫЙ параметр - AttributeTargets, определяет элементы программы,
    // для которых атрибут может быть применен.
    // Параметр - AttributeTargets.All - позволяет использовать атрибут - MyAttribute ДЛЯ любого элемента(потому, что All)
    // ИМЕНОВАННЫЙ параметр - AllowMultiple = false, определяет сколько рах к элементу можно
    // применять атрибут.

    //конструкция ниже - это как буд-то создается экземпляр класса AttributeUsage(суфикс Attribute в конце не пишется)
    //вызвается конструктор и ПОЗИЦИОННЫЕ параметры - это параметры конструктора, а ИМЕНОВАННЫ - это публичные свойства класса!
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = false)] //создаем класс MyAttribute и ДЕКОРИРУЕМ его аттрибутом AttributeUsage
    class MyAttribute : Attribute //нужно унаслеждоваться от Attribute чтобы мы могли использовать класс MyAttribute как аттрибут
    {
        private readonly string date;
        public string Date => date;

        //Поизиционные параметры задаются формальными параметрами - public констуктора, класса атрибута
        public MyAttribute(string date)
        {
            this.date = date;
        }

        //Именованные параметры задаются ОТКРЫТЫМИ НЕСТАТИЧЕСКИМИ ПОЛЯМИ ИЛИ СВОЙСТВАМИ 
        //Т.е свойство для чтения не канает. Свойство должно быть полным!
        public int Number { get; set; }
    }
}
